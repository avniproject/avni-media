version: 2.1

commands:
  deploy:
    description: Deployment of avni-media
    parameters:
      hostname:
        type: string
        default: "int-staging.avniproject.org"
      env:
        type: string
        default: "staging"
    steps:
      - attach_workspace:
          at: ~/artifacts

      - run: sudo apt-get install make openssl

      - run:
          name: Install dependencies
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -y -qq install python3-pip
            sudo pip3 install awscli --upgrade
            sudo pip3 install ansible

      - run: curl -L https://github.com/avniproject/avni-infra/archive/master.zip >> ~/infra.zip

      - run: |
          cd ~/
          unzip infra.zip
          mv avni-infra-master avni-infra
          rm -rf infra.zip

      - run: echo $ANSIBLE_VAULT_PASS > ~/.vault-pass.txt

      - run: |
#          #TODO add commands to perform deploy of client and server
#          pwd
#          cd ~/avni-infra/configure
#          cp ~/artifacts/<< parameters.env >>-avni-int-admin-app.tgz ~/artifacts/avni-int-admin-app.tgz
#          VAULT_PASSWORD_FILE=~/.vault-pass.txt web_zip_path=~/artifacts/ make deploy-int-webapp-<< parameters.env >>

      - run: rm ~/.vault-pass.txt

jobs:

  build:
    docker:
      - image: cimg/node:19.8.1

    working_directory: ~/avni-media

    environment:
      - ANSIBLE_HOST_KEY_CHECKING: False
      - ANSIBLE_LOCAL_TEMP: /home/circleci/.ansible/tmp
      - ANSIBLE_REMOTE_TEMP: /home/circleci/.ansible/tmp
      - MAVEN_OPTS: -Xmx3200m

    steps:
      - checkout

      - run: sudo apt-get install make openssl

      - run: mkdir -p ~/artifacts;

      - run: cd ~/avni-media/client

      - restore_cache:
          key: dependency-cache-client-{{ checksum "package.json" }}

      - run: npm install --legacy-peer-deps

      - save_cache:
          key: dependency-cache-client-{{ checksum "package.json" }}
          paths:
            - ./node_modules

      - run: make zip-app-staging

      - run: cp ~/avni-media/avni-media-client.tgz ~/artifacts/staging-avni-media-client.tgz;

      - run: make zip-app-prod

      - run: cp ~/avni-media/avni-media-client.tgz ~/artifacts/prod-avni-media-client.tgz;

      - run: cd ~/avni-media/server

      - restore_cache:
          key: dependency-cache-server-{{ checksum "package.json" }}

      - run: npm install --legacy-peer-deps

      - save_cache:
          key: dependency-cache-server-{{ checksum "package.json" }}
          paths:
            - ./node_modules

      - run: make zip-app-staging

      - run: cp ~/avni-media/avni-media-server.tgz ~/artifacts/staging-avni-media-server.tgz;

      - run: make zip-app-prod

      - run: cp ~/avni-media/avni-media-server.tgz ~/artifacts/prod-avni-media-server.tgz;

      - persist_to_workspace:
          root: ~/artifacts
          paths:
            - prod-avni-media-client.tgz
            - staging-avni-media-client.tgz
            - prod-avni-media-server.tgz
            - staging-avni-media-server.tgz

      - store_artifacts:
          path: ~/artifacts

  STAGING_deploy:
    docker:
      - image: circleci/openjdk:11-jdk
        environment:
          ANSIBLE_HOST_KEY_CHECKING: no
    working_directory: ~/
    steps:
      - deploy:
          hostname: "int-staging.avniproject.org"
          env: "staging"

  PRODUCTION_deploy:
    docker:
      - image: circleci/openjdk:11-jdk
    working_directory: ~/
    steps:
      - deploy:
          hostname: "int-prod.avniproject.org"
          env: "prod"

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - STAGING_approve:
          type: approval
          requires:
            - build
      - STAGING_deploy:
          requires:
            - STAGING_approve
      - PRODUCTION_approve:
          type: approval
          requires:
            - build
      - PRODUCTION_deploy:
          requires:
            - PRODUCTION_approve
